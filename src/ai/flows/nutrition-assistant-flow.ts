'use server';
/**
 * @fileOverview An AI flow for generating sample meal plans.
 *
 * - getNutritionPlan - Generates a meal plan based on user goals and preferences.
 * - GetNutritionPlanInput - The input type for the function.
 * - GetNutritionPlanOutput - The return type for the function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GetNutritionPlanInputSchema = z.object({
  goal: z.enum(['lose-weight', 'gain-muscle', 'maintain-weight']).describe('The user\'s primary fitness goal.'),
  dietaryPreferences: z.array(z.string()).optional().describe('A list of dietary preferences or restrictions (e.g., vegetarian, gluten-free).'),
  dislikedFoods: z.string().optional().describe('A comma-separated list of foods the user dislikes and wants to avoid.'),
  dailyCalories: z.number().int().positive().describe('The target daily calorie intake.'),
});
export type GetNutritionPlanInput = z.infer<typeof GetNutritionPlanInputSchema>;

const MealSchema = z.object({
    mealName: z.string().describe("A descriptive name for the meal."),
    description: z.string().describe("A brief description of the meal, including main ingredients."),
    calories: z.number().int().describe("An approximate calorie count for the meal."),
});

const GetNutritionPlanOutputSchema = z.object({
  mealPlan: z.object({
      breakfast: MealSchema,
      lunch: MealSchema,
      dinner: MealSchema,
      snacks: MealSchema,
  }),
  totalCalories: z.number().int().describe("The total approximate calories for the entire day's plan."),
  disclaimer: z.string().describe("A mandatory disclaimer stating this is not professional medical advice."),
});
export type GetNutritionPlanOutput = z.infer<typeof GetNutritionPlanOutputSchema>;

export async function getNutritionPlan(input: GetNutritionPlanInput): Promise<GetNutritionPlanOutput> {
  return nutritionAssistantFlow(input);
}

const prompt = ai.definePrompt({
  name: 'nutritionAssistantPrompt',
  input: {schema: GetNutritionPlanInputSchema},
  output: {schema: GetNutritionPlanOutputSchema},
  prompt: `You are an expert AI Nutrition Assistant for a fitness coach. Your role is to generate a simple, balanced, one-day sample meal plan based on a client's goals and preferences.

Analyze the following client information and create a suitable meal plan.

Client Information:
- Primary Goal: {{goal}}
- Daily Calorie Target: {{dailyCalories}}
{{#if dietaryPreferences}}
- Dietary Preferences/Restrictions: {{#each dietaryPreferences}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}
{{/if}}
{{#if dislikedFoods}}
- Foods to Avoid: {{dislikedFoods}}
{{/if}}

Based on this, generate a structured meal plan consisting of breakfast, lunch, dinner, and snacks.
- The total calories for the day should be as close as possible to the client's target.
- The meals should be simple and easy to prepare.
- You must respect all dietary preferences and avoid any disliked foods.
- Provide an estimated calorie count for each meal.
- Finally, you must *always* return the following text for the disclaimer field, exactly as written: "IMPORTANT: This is a sample meal plan generated by an AI and is for informational purposes only. It is not a substitute for professional medical or nutritional advice. Consult with a qualified nutritionist or healthcare provider before making any dietary changes."
`,
});

const nutritionAssistantFlow = ai.defineFlow(
  {
    name: 'nutritionAssistantFlow',
    inputSchema: GetNutritionPlanInputSchema,
    outputSchema: GetNutritionPlanOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
